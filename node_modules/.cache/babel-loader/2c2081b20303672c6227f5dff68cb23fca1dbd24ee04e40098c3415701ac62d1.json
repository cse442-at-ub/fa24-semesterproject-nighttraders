{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roybw\\\\hello-world2\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [name, setName] = useState(''); // State to hold the fetched name\n  const [loading, setLoading] = useState(true); // State for loading status\n  const [error, setError] = useState(null); // State to handle errors\n\n  // Fetch data from dashboard.php when the component mounts\n  // useEffect(() => {\n  //   fetch('http://your-server-url/dashboard.php') // Replace with your actual URL\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //       }\n  //       return response.json(); // Parse the JSON from the response\n  //     })\n  //     .then((data) => {\n  //       setName(data.name); // Assuming the JSON contains a field 'name'\n  //       setLoading(false); // Set loading to false after data is fetched\n  //     })\n  //     .catch((error) => {\n  //       setError(error); // Handle any errors that occur during fetch\n  //       setLoading(false);\n  //     });\n  // }, []); // Empty dependency array ensures it runs once, when the component mounts\n\n  // if (loading) {\n  //   return <div className=\"App\">Loading...</div>;\n  // }\n\n  // if (error) {\n  //   return <div className=\"App\">Error: {error.message}</div>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Welcome, \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HJEnvvRkGsIazbHJwxNeiebs2bA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","name","setName","loading","setLoading","error","setError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/roybw/hello-world2/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [name, setName] = useState(''); // State to hold the fetched name\n  const [loading, setLoading] = useState(true); // State for loading status\n  const [error, setError] = useState(null); // State to handle errors\n\n  // Fetch data from dashboard.php when the component mounts\n  // useEffect(() => {\n  //   fetch('http://your-server-url/dashboard.php') // Replace with your actual URL\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //       }\n  //       return response.json(); // Parse the JSON from the response\n  //     })\n  //     .then((data) => {\n  //       setName(data.name); // Assuming the JSON contains a field 'name'\n  //       setLoading(false); // Set loading to false after data is fetched\n  //     })\n  //     .catch((error) => {\n  //       setError(error); // Handle any errors that occur during fetch\n  //       setLoading(false);\n  //     });\n  // }, []); // Empty dependency array ensures it runs once, when the component mounts\n\n  // if (loading) {\n  //   return <div className=\"App\">Loading...</div>;\n  // }\n\n  // if (error) {\n  //   return <div className=\"App\">Error: {error.message}</div>;\n  // }\n\n  return (\n    <div className=\"App\">\n      <div className=\"top-bar\">\n        <h1>Dashboard</h1>\n        <button className=\"logout-button\">Logout</button>\n      </div>\n      <div className=\"content\">\n        <h2>Welcome, {name}</h2> {/* Display the fetched name here */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACEG,OAAA;IAAKS,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBV,OAAA;MAAKS,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBV,OAAA;QAAAU,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBd,OAAA;QAAQS,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACNd,OAAA;MAAKS,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBV,OAAA;QAAAU,QAAA,GAAI,WAAS,EAACP,IAAI;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACZ,EAAA,CA3CQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}